#!/usr/bin/env node

const path = require('path');
const chalk = require('chalk');
const program = require('commander');
const ora = require('ora');
const config = require('../lib/config');
const package = require('../package.json');
const fse = require('fs-extra');
const spawn = require('cross-spawn');
const os = require('os');
const envinfo = require('envinfo');

program
  .version(package.version)
  .usage('<command>')
  .description(chalk.cyan('espack'));

program
  .command('dev')
  .version(package.version)
  .description('Builds the application and starts a development server.')
  .option('-p, --port <value>', 'Specify a port number to run dev server', process.env.npm_package_config_port || 8888)
  .option('-v, --views_folder <value>', 'The bundled html will be under this path', config.VIEW_ROOT)
  .option('-s, --static_folder <value>', 'The bundled resources will be under this path', config.STATIC_ROOT)
  .option('-c, --css_assets_path <value>', 'The url root path in css will be replaced', config.CSS_ASSETS_PATH)
  .option('-b, --base_tag <value>', 'Specify a default base URL for all links on a page', config.BASE_TAG)
  .action((env, options) => {
    let runner;
    try {
      runner = require('../lib/register');
    } catch(e) {
      console.log(`${chalk.black.bgRed(' WARN ')} ${chalk.red('espack dev for Local installation only')}`);
      process.exit(1);
      return;
    }
    const spinner = ora(config.CLI_DEV_TITLE).start();
    runner.start({
      dev: true,
      port: env.port,
      viewsFolder: env.views_folder,
      staticFolder: env.static_folder,
      cssAssetsPath: env.css_assets_path,
      baseTag: env.base_tag,
      spinner,
    });
  });

program
  .command('build')
  .version(package.version)
  .description('Compiles the application into an output directory')
  .option('-d, --drop_console', 'Remove console', true)
  .option('-v, --views_folder <value>', 'The bundled html will be under this path', config.VIEW_ROOT)
  .option('-s, --static_folder <value>', 'The bundled resources will be under this path', config.STATIC_ROOT)
  .option('-c, --css_assets_path <value>', 'The url root path in css will be replaced', config.CSS_ASSETS_PATH)
  .option('-b, --base_tag <value>', 'Specify a default base URL for all links on a page', config.BASE_TAG)
  .option('-k, --keep_dist', 'Do not remove the dist folder when publishing', true)
  .action((env, options) => {
    let runner;
    try {
      runner = require('../lib/register');
    } catch(e) {
      console.log(`${chalk.black.bgRed(' WARN ')} ${chalk.red('espack build for Local installation only')}`);
      process.exit(1);
      return;
    }
    const spinner = ora(config.CLI_BUILD_TITLE).start();
    runner.start({
      dev: false,
      keepDist: env.keep_dist || false,
      dropConsole: env.drop_console || false,
      viewsFolder: env.views_folder,
      staticFolder: env.static_folder,
      cssAssetsPath: env.css_assets_path,
      baseTag: env.base_tag,
      spinner,
    });
  });

program
  .command('new <project>')
  .version(package.version)
  .description('Creates a new espack project application')
  .option('-i, --install <value>', 'Installation options', 'npm')
  .action((env, options) => {
    if (typeof env === 'string') {
      const project = env;
      const workDirectory = path.join(process.cwd(), project);
      const installOptions = [
        'npm',
        'yarn'
      ].indexOf(options.install.toLocaleLowerCase()) === -1
        ? 'npm'
        : options.install.toLocaleLowerCase();
      envinfo.run(
        {
          Binaries: ['Node', 'Yarn', 'npm', 'create-react-app'],
        },
        { json: true }
      ).then((data) => {
        const info = JSON.parse(data);
        if (
          (installOptions === 'npm' && info.Binaries.npm)
          || (installOptions === 'yarn' && info.Binaries.Yarn)
        ) {
          createApp({
            project,
            workDirectory,
            installOptions,
          });
        } else {
          console.log(`${chalk.black.bgRed(' WARN ')} ${chalk.red(`you must first install ${installOptions} globally`)}`);
          process.exit(1);
        }
      });
    }
  });


console.log();
process.on('exit', () => {
  console.log();
});

program
  .parse(process.argv);

// help
if (program.args.length < 1) return program.help();





function createApp({
  project,
  workDirectory,
  installOptions,
}) {
  if (fse.existsSync(workDirectory)) {
    console.log(`${chalk.black.bgRed(' WARN ')} ${chalk.red('the project path exists')}`);
    process.exit(1);
  } else {
    // create folder
    fse.mkdirSync(workDirectory);
    // write package.json
    const packageJson = {
      name: project,
      version: '1.0.0',
      description: '',
      scripts: {
        dev: 'espack dev',
        build: 'espack build'
      }
    };
    fse.writeFileSync(
      path.join(workDirectory, 'package.json'),
      JSON.stringify(packageJson, null, 2) + os.EOL
    );
    // create pages
    fse.ensureDirSync(path.join(workDirectory, 'src', 'pages'));
    ['App.js', 'App.ejs', 'App.scss'].forEach((file) => {
      fse.copyFileSync(
        path.join(__dirname, '../lib/template/pages', file),
        path.join(workDirectory, 'src', 'pages', file)
      );
    });
    let appFiles = fse.readFileSync(
      path.join(__dirname, '../lib/template/pages', 'App.js'),
      { encoding: 'utf-8' }
    );
    appFiles = appFiles.replace('{{version}}', package.version);
    fse.writeFileSync(
      path.join(workDirectory, 'src', 'pages', 'App.js'),
      appFiles
    );
    // install espack locally
    if (installOptions === 'npm') {
      spawn.sync(
        'npm',
        ['install', '@104corp/espack', '-D'],
        {
          stdio: 'inherit',
          cwd: workDirectory,
        },
      );
    } else if (installOptions === 'yarn') {
      spawn.sync(
        'yarn',
        ['add', '@104corp/espack', '-D'],
        {
          stdio: 'inherit',
          cwd: workDirectory,
        },
      );
    }
  }
}